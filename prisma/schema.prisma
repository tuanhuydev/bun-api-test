generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model assets {
  id          Int           @id @default(autoincrement())
  url         String
  type        String
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @default(now()) @db.Timestamp(6)
  deletedAt   DateTime?     @db.Timestamp(6)
  post_assets post_assets[]
}

model meta {
  id        Int       @id @default(autoincrement())
  key       String    @db.VarChar(50)
  value     String
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
}

model permissions {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  updatedAt            DateTime               @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  resource_permissions resource_permissions[]
  users                users[]
}

model post_assets {
  postId  Int
  assetId Int
  assets  assets @relation(fields: [assetId], references: [id])
  posts   posts  @relation(fields: [postId], references: [id])

  @@id([postId, assetId])
}

model posts {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  content     String
  publishedAt DateTime?     @db.Timestamp(6)
  authorId    String        @db.Uuid
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @default(now()) @db.Timestamp(6)
  slug        String
  deletedAt   DateTime?     @db.Timestamp(6)
  thumbnail   String?       @db.VarChar(255)
  post_assets post_assets[]
  users       users         @relation(fields: [authorId], references: [id])

  @@index([title, authorId])
}

model project_users {
  userId    String   @db.Uuid
  projectId Int
  roleId    Int
  projects  projects @relation(fields: [projectId], references: [id])
  roles     roles    @relation(fields: [roleId], references: [id])
  users     users    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

model projects {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String
  thumbnail     String?         @db.VarChar(255)
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @db.Timestamp(6)
  deletedAt     DateTime?       @db.Timestamp(6)
  endDate       DateTime?       @db.Timestamp(6)
  startDate     DateTime?       @db.Timestamp(6)
  clientName    String?         @db.VarChar(255)
  project_users project_users[]
  tasks         tasks[]
}

model resource_permissions {
  resourceId   Int
  permissionId Int
  resourceType String
  permissions  permissions @relation(fields: [permissionId], references: [id])
  resources    resources   @relation(fields: [resourceId], references: [id])

  @@id([resourceId, permissionId])
}

model resources {
  id                   Int                    @id @default(autoincrement())
  name                 String
  resource_permissions resource_permissions[]
}

model roles {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @db.Timestamp(6)
  deletedAt     DateTime?       @db.Timestamp(6)
  project_users project_users[]
}

model sprints {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  fromDate    DateTime? @db.Timestamp(6)
  toDate      DateTime  @db.Timestamp(6)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  tasks       tasks[]

  @@index([name])
}

model status {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String
  color       String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  type        String    @default("default")
  tasks       tasks[]
}

model tasks {
  id                             Int       @id @default(autoincrement())
  title                          String    @db.VarChar(255)
  description                    String
  projectId                      Int?
  statusId                       Int?
  createdAt                      DateTime  @default(now()) @db.Timestamp(6)
  updatedAt                      DateTime  @default(now()) @db.Timestamp(6)
  deletedAt                      DateTime? @db.Timestamp(6)
  sprintId                       Int?
  assigneeId                     String?   @db.Uuid
  createdById                    String?   @db.Uuid
  users_tasks_assigneeIdTousers  users?    @relation("tasks_assigneeIdTousers", fields: [assigneeId], references: [id])
  users_tasks_createdByIdTousers users?    @relation("tasks_createdByIdTousers", fields: [createdById], references: [id])
  projects                       projects? @relation(fields: [projectId], references: [id])
  sprints                        sprints?  @relation(fields: [sprintId], references: [id])
  status                         status?   @relation(fields: [statusId], references: [id])

  @@index([title])
}

model users {
  id                             String          @unique @db.Uuid
  name                           String          @db.VarChar(50)
  email                          String          @unique @db.VarChar(50)
  password                       String          @default("0") @db.VarChar(255)
  createdAt                      DateTime        @default(now()) @db.Timestamp(6)
  updatedAt                      DateTime        @default(now()) @db.Timestamp(6)
  deletedAt                      DateTime?       @db.Timestamp(6)
  permissionId                   Int
  posts                          posts[]
  project_users                  project_users[]
  tasks_tasks_assigneeIdTousers  tasks[]         @relation("tasks_assigneeIdTousers")
  tasks_tasks_createdByIdTousers tasks[]         @relation("tasks_createdByIdTousers")
  permissions                    permissions     @relation(fields: [permissionId], references: [id])
}
